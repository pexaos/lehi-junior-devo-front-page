"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var execa_1 = __importDefault(require("execa"));
var path_1 = require("path");
var fs_1 = require("fs");
var config_1 = require("./config");
var convert_1 = __importDefault(require("./convert"));
/**
 * Lints files using the TSLint CLI via a child process.
 *
 * Though TSLint has a Node API, it only offers a subset of the features that
 * the CLI has, which is why it is not being used.
 *
 * @param paths An array of file globs that you want to lint.
 * @param options A configuration object that lets you customize how lynt works.
 * @return A `results` object with an errorCount and output.
 */
function tslint(paths, options) {
    if (!options.project && paths.length === 0) {
        options.project = '.';
    }
    var configData = config_1.getTSLintConfig(options);
    var configPath = path_1.join(__dirname, 'tslint.json');
    fs_1.writeFileSync(configPath, JSON.stringify(configData, null, 2));
    var tslintArgs = [];
    if (paths) {
        tslintArgs.push.apply(tslintArgs, __spread(paths));
    }
    tslintArgs.push('--config', configPath);
    tslintArgs.push('--format', 'json');
    if (options.project) {
        if (!fs_1.existsSync(path_1.join(options.project, 'tsconfig.json'))) {
            throw new Error('You must have a tsconfig.json file in your project root or point to it with a --project flag');
        }
        tslintArgs.push('--project', options.project);
    }
    if (options.fix) {
        tslintArgs.push('--fix');
    }
    if (options.ignore) {
        var ignores = Array.isArray(options.ignore)
            ? options.ignore
            : [options.ignore];
        ignores.forEach(function (glob) { return tslintArgs.push('--exclude', glob); });
    }
    var results = [];
    try {
        execa_1.default.sync('tslint', tslintArgs);
    }
    catch (lynt) {
        try {
            var tslintResults = JSON.parse(lynt.stdout);
            results = convert_1.default(tslintResults);
        }
        catch (jsonErr) {
            throw new Error(lynt.stdout || lynt.stderr || jsonErr);
        }
    }
    return results;
}
exports.default = tslint;
