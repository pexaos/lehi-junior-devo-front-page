"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Converts TSLint's JSON format to Lynt's JSON format.
 *
 * The main reason `eslint` and `tslint` have a `convert` file is to have a
 * unified JSON output â€“ ESLint and TSLint have different JSON outputs by
 * default, so this normalizes the difference.
 *
 * TSLint does not organize errors by file, so there is an extra step done to
 * create an error map of fileName => lintErrors before converting.
 *
 * @param tslintResults The lint results received from running TSLint.
 * @return A modified version of the lint results following the lynt's schema.
 */
function convert(tslintResults) {
    var sortedResults = tslintResults.sort(function (a, b) {
        if (a.name !== b.name) {
            return a.name < b.name ? -1 : 1;
        }
        return a.startPosition.position - b.startPosition.position;
    });
    var errorMap = {};
    sortedResults.forEach(function (result) {
        if (errorMap[result.name]) {
            errorMap[result.name].push(result);
        }
        else {
            errorMap[result.name] = [result];
        }
    });
    return Object.keys(errorMap).map(function (fileName) {
        var lintErrors = errorMap[fileName];
        return {
            filePath: fileName,
            errors: lintErrors.map(function (lintErr) { return ({
                ruleName: lintErr.ruleName,
                message: lintErr.failure,
                line: lintErr.startPosition.line + 1,
                column: lintErr.startPosition.character + 1,
                endLine: lintErr.endPosition.line + 1,
                endColumn: lintErr.endPosition.character + 1
            }); }),
            errorCount: lintErrors.length,
            fixCount: lintErrors.reduce(function (sum, curr) { return (curr.fix ? sum + 1 : sum); }, 0)
        };
    });
}
exports.default = convert;
