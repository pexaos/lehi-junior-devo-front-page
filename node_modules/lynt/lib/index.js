"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var eslint_1 = __importDefault(require("./eslint"));
var tslint_1 = __importDefault(require("./tslint"));
/**
 * Uses ESLint or TSLint to lint a given set of files.
 *
 * @param paths An array of file globs that you want to lint.
 * @param options A configuration object that lets you customize how lynt works.
 * @return An array of lint errors.
 */
function lynt(paths, options) {
    if (options === void 0) { options = {}; }
    if (!paths) {
        throw new TypeError('You must pass in path(s) of files to lint.');
    }
    if (typeof paths !== 'string' && !Array.isArray(paths)) {
        throw new TypeError('paths must be a string or array of strings.');
    }
    if (options.typescript && options.flow) {
        throw new TypeError('You cannot use TypeScript and Flow together.');
    }
    var files = Array.isArray(paths) ? paths : [paths];
    var results = options.typescript
        ? tslint_1.default(files, options)
        : eslint_1.default(files, options);
    return results;
}
var format_1 = require("./common/format");
exports.format = format_1.default;
exports.default = lynt;
